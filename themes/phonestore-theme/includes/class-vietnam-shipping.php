<?php
if (!defined('ABSPATH')) {
    exit;
}

class Vietnam_Shipping_Calculator extends WC_Shipping_Method {
    
    public function __construct($instance_id = 0) {
        $this->id = 'vietnam_shipping_calculator';
        $this->instance_id = absint($instance_id);
        $this->method_title = 'T√≠nh ph√≠ ship Vi·ªát Nam';
        $this->method_description = 'T√≠nh ph√≠ ship theo quy t·∫Øc giao h√†ng Vi·ªát Nam';
        $this->supports = array(
            'shipping-zones',
            'instance-settings',
        );
        
        $this->init();
    }
    
    public function init() {
        $this->init_form_fields();
        $this->init_settings();
        
        $this->title = $this->get_option('title');
        $this->enabled = $this->get_option('enabled');
        
        add_action('woocommerce_update_options_shipping_' . $this->id, array($this, 'process_admin_options'));
    }
    
    public function init_form_fields() {
        $this->form_fields = array(
            'enabled' => array(
                'title' => 'K√≠ch ho·∫°t',
                'type' => 'checkbox',
                'description' => 'K√≠ch ho·∫°t ph∆∞∆°ng th·ª©c giao h√†ng n√†y',
                'default' => 'yes'
            ),
            'title' => array(
                'title' => 'Ti√™u ƒë·ªÅ',
                'type' => 'text',
                'description' => 'Ti√™u ƒë·ªÅ hi·ªÉn th·ªã cho kh√°ch h√†ng',
                'default' => 'Giao h√†ng t·∫°i Vi·ªát Nam'
            ),
            'store_address' => array(
                'title' => 'ƒê·ªãa ch·ªâ c·ª≠a h√†ng',
                'type' => 'textarea',
                'description' => 'ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß c·ªßa c·ª≠a h√†ng',
                'default' => 'C√°i RƒÉng, C·∫ßn Th∆°, Vi·ªát Nam'
            )
        );
    }
    
    public function calculate_shipping($package = array()) {
        $customer_city = strtolower($package['destination']['city'] ?? '');
        $customer_state = strtolower($package['destination']['state'] ?? '');
        $customer_address = $this->get_customer_address($package);
        
        // T√≠nh kho·∫£ng c√°ch
        $store_address = $this->get_option('store_address', 'C√°i RƒÉng, C·∫ßn Th∆°, Vi·ªát Nam');
        $distance = $this->calculate_distance($store_address, $customer_address);
        
        if ($distance !== false && $distance <= 30) {
            $this->add_local_shipping_options($distance);
        } else {
            $this->add_viettel_post_options($customer_state);
        }
    }
    
    private function add_local_shipping_options($distance) {
        // Giao h√†ng g·∫ßn (0-30km)
        if ($distance <= 10) {
            $this->add_rate(array(
                'id' => $this->get_rate_id() . '_free',
                'label' => sprintf('üöö Giao h√†ng mi·ªÖn ph√≠ (%.1f km)', $distance),
                'cost' => 0,
                'meta_data' => array('delivery_time' => 'Trong ng√†y')
            ));
        } elseif ($distance <= 20) {
            $this->add_rate(array(
                'id' => $this->get_rate_id() . '_near',
                'label' => sprintf('üöö Giao h√†ng g·∫ßn (%.1f km)', $distance),
                'cost' => 15000,
                'meta_data' => array('delivery_time' => 'Trong ng√†y')
            ));
        } elseif ($distance <= 30) {
            $this->add_rate(array(
                'id' => $this->get_rate_id() . '_medium',
                'label' => sprintf('üöö Giao h√†ng trung (%.1f km)', $distance),
                'cost' => 25000,
                'meta_data' => array('delivery_time' => '1-2 ng√†y')
            ));
        }
    }
    
    private function add_viettel_post_options($customer_state) {
        $is_same_region = $this->is_same_region($customer_state);
        
        // G√≥i ti·∫øt ki·ªám
        $economy_cost = $is_same_region ? 25000 : 35000;
        $region_text = $is_same_region ? 'C√πng v√πng' : 'Kh√°c v√πng';
        
        $this->add_rate(array(
            'id' => $this->get_rate_id() . '_economy',
            'label' => "üì¶ Viettel Post Ti·∫øt Ki·ªám ({$region_text})",
            'cost' => $economy_cost,
            'meta_data' => array('delivery_time' => '3-5 ng√†y')
        ));
        
        // G√≥i giao nhanh  
        $express_cost = $is_same_region ? 40000 : 50000;
        
        $this->add_rate(array(
            'id' => $this->get_rate_id() . '_express',
            'label' => "‚ö° Viettel Post Giao Nhanh ({$region_text})",
            'cost' => $express_cost,
            'meta_data' => array('delivery_time' => '1-2 ng√†y')
        ));
    }
    
    private function is_same_region($customer_state) {
        $customer_state = strtolower($customer_state);
        
        // Mi·ªÅn Nam (c√πng v√πng v·ªõi C·∫ßn Th∆°)
        $south_provinces = array(
            'c·∫ßn th∆°', 'an giang', 'b·∫°c li√™u', 'b·∫øn tre', 'c√† mau', 
            'ƒë·ªìng th√°p', 'h·∫≠u giang', 'ki√™n giang', 'long an', 
            's√≥c trƒÉng', 'ti·ªÅn giang', 'tr√† vinh', 'vƒ©nh long',
            'h·ªì ch√≠ minh', 'b√¨nh d∆∞∆°ng', 'ƒë·ªìng nai', 'b√† r·ªãa v≈©ng t√†u',
            't√¢y ninh', 'b√¨nh ph∆∞·ªõc', 'b√¨nh thu·∫≠n', 'ninh thu·∫≠n'
        );
        
        foreach ($south_provinces as $province) {
            if (strpos($customer_state, $province) !== false) {
                return true;
            }
        }
        
        return false;
    }
    
    // Include c√°c method calculate_distance t·ª´ class tr∆∞·ªõc
    private function calculate_distance($from, $to) {
        // Copy t·ª´ class Distance_Based_Shipping ·ªü tr√™n
    }
    
    private function get_customer_address($package) {
        // Copy t·ª´ class Distance_Based_Shipping
    }
}